### YamlMime:ManagedReference
items:
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  commentId: T:SharpHoundCommonLib.LDAPQueries.LDAPFilter
  id: LDAPFilter
  parent: SharpHoundCommonLib.LDAPQueries
  children:
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter(System.String)
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers(System.String[])
  - SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter
  langs:
  - csharp
  - vb
  name: LDAPFilter
  nameWithType: LDAPFilter
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  type: Class
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: LDAPFilter
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 8
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nA class used to more easily build LDAP filters based on the common filters used by SharpHound\n"
  example: []
  syntax:
    content: public class LDAPFilter
    content.vb: Public Class LDAPFilter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects(System.String[])
  id: AddAllObjects(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddAllObjects(String[])
  nameWithType: LDAPFilter.AddAllObjects(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddAllObjects
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 52
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a wildcard filter will match all object types\n"
  example: []
  syntax:
    content: public LDAPFilter AddAllObjects(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddAllObjects(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects*
  nameWithType.vb: LDAPFilter.AddAllObjects(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects(System.String())
  name.vb: AddAllObjects(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers(System.String[])
  id: AddUsers(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddUsers(String[])
  nameWithType: LDAPFilter.AddUsers(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddUsers
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 64
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will match User objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddUsers(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddUsers(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers*
  nameWithType.vb: LDAPFilter.AddUsers(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers(System.String())
  name.vb: AddUsers(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups(System.String[])
  id: AddGroups(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddGroups(String[])
  nameWithType: LDAPFilter.AddGroups(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddGroups
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 76
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will match Group objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddGroups(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddGroups(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups*
  nameWithType.vb: LDAPFilter.AddGroups(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups(System.String())
  name.vb: AddGroups(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups(System.String[])
  id: AddPrimaryGroups(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddPrimaryGroups(String[])
  nameWithType: LDAPFilter.AddPrimaryGroups(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddPrimaryGroups
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 88
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include any object with a primary group\n"
  example: []
  syntax:
    content: public LDAPFilter AddPrimaryGroups(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddPrimaryGroups(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups*
  nameWithType.vb: LDAPFilter.AddPrimaryGroups(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups(System.String())
  name.vb: AddPrimaryGroups(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs(System.String[])
  id: AddGPOs(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddGPOs(String[])
  nameWithType: LDAPFilter.AddGPOs(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddGPOs
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 100
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include GPO objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddGPOs(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddGPOs(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs*
  nameWithType.vb: LDAPFilter.AddGPOs(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs(System.String())
  name.vb: AddGPOs(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs(System.String[])
  id: AddOUs(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddOUs(String[])
  nameWithType: LDAPFilter.AddOUs(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddOUs
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 112
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include OU objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddOUs(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddOUs(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs*
  nameWithType.vb: LDAPFilter.AddOUs(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs(System.String())
  name.vb: AddOUs(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains(System.String[])
  id: AddDomains(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddDomains(String[])
  nameWithType: LDAPFilter.AddDomains(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddDomains
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 124
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include Domain objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddDomains(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddDomains(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains*
  nameWithType.vb: LDAPFilter.AddDomains(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains(System.String())
  name.vb: AddDomains(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers(System.String[])
  id: AddContainers(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddContainers(String[])
  nameWithType: LDAPFilter.AddContainers(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddContainers
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 136
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include Container objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddContainers(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddContainers(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers*
  nameWithType.vb: LDAPFilter.AddContainers(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers(System.String())
  name.vb: AddContainers(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers(System.String[])
  id: AddComputers(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddComputers(String[])
  nameWithType: LDAPFilter.AddComputers(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddComputers
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 148
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include Computer objects\n"
  example: []
  syntax:
    content: public LDAPFilter AddComputers(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddComputers(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers*
  nameWithType.vb: LDAPFilter.AddComputers(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers(System.String())
  name.vb: AddComputers(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID(System.String[])
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID(System.String[])
  id: AddSchemaID(System.String[])
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddSchemaID(String[])
  nameWithType: LDAPFilter.AddSchemaID(String[])
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID(System.String[])
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddSchemaID
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 159
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a filter that will include schema items\n"
  example: []
  syntax:
    content: public LDAPFilter AddSchemaID(params string[] conditions)
    parameters:
    - id: conditions
      type: System.String[]
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddSchemaID(ParamArray conditions As String()) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID*
  nameWithType.vb: LDAPFilter.AddSchemaID(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID(System.String())
  name.vb: AddSchemaID(String())
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter(System.String)
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter(System.String)
  id: AddFilter(System.String)
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: AddFilter(String)
  nameWithType: LDAPFilter.AddFilter(String)
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter(System.String)
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: AddFilter
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 170
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nAdd a generic filter user-specified filter\n"
  example: []
  syntax:
    content: public LDAPFilter AddFilter(string filter)
    parameters:
    - id: filter
      type: System.String
      description: ''
    return:
      type: SharpHoundCommonLib.LDAPQueries.LDAPFilter
      description: ''
    content.vb: Public Function AddFilter(filter As String) As LDAPFilter
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter
  commentId: M:SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter
  id: GetFilter
  parent: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  langs:
  - csharp
  - vb
  name: GetFilter()
  nameWithType: LDAPFilter.GetFilter()
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter()
  type: Method
  source:
    remote:
      path: src/CommonLib/LDAPQueries/LDAPFilter.cs
      branch: master
      repo: https://github.com/BloodHoundAD/SharpHoundCommon.git
    id: GetFilter
    path: ../src/CommonLib/LDAPQueries/LDAPFilter.cs
    startLine: 181
  assemblies:
  - SharpHoundCommonLib
  namespace: SharpHoundCommonLib.LDAPQueries
  summary: "\nCombines all the specified parts of the LDAP filter and merges them into a single string\n"
  example: []
  syntax:
    content: public string GetFilter()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetFilter As String
  overload: SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SharpHoundCommonLib.LDAPQueries
  commentId: N:SharpHoundCommonLib.LDAPQueries
  name: SharpHoundCommonLib.LDAPQueries
  nameWithType: SharpHoundCommonLib.LDAPQueries
  fullName: SharpHoundCommonLib.LDAPQueries
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects
  name: AddAllObjects
  nameWithType: LDAPFilter.AddAllObjects
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddAllObjects
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter
  commentId: T:SharpHoundCommonLib.LDAPQueries.LDAPFilter
  parent: SharpHoundCommonLib.LDAPQueries
  name: LDAPFilter
  nameWithType: LDAPFilter
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers
  name: AddUsers
  nameWithType: LDAPFilter.AddUsers
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddUsers
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups
  name: AddGroups
  nameWithType: LDAPFilter.AddGroups
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGroups
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups
  name: AddPrimaryGroups
  nameWithType: LDAPFilter.AddPrimaryGroups
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddPrimaryGroups
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs
  name: AddGPOs
  nameWithType: LDAPFilter.AddGPOs
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddGPOs
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs
  name: AddOUs
  nameWithType: LDAPFilter.AddOUs
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddOUs
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains
  name: AddDomains
  nameWithType: LDAPFilter.AddDomains
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddDomains
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers
  name: AddContainers
  nameWithType: LDAPFilter.AddContainers
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddContainers
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers
  name: AddComputers
  nameWithType: LDAPFilter.AddComputers
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddComputers
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID
  name: AddSchemaID
  nameWithType: LDAPFilter.AddSchemaID
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddSchemaID
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter
  name: AddFilter
  nameWithType: LDAPFilter.AddFilter
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.AddFilter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter*
  commentId: Overload:SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter
  name: GetFilter
  nameWithType: LDAPFilter.GetFilter
  fullName: SharpHoundCommonLib.LDAPQueries.LDAPFilter.GetFilter
